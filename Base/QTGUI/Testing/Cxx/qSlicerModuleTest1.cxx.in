/*==============================================================================

  Program: 3D Slicer

  Copyright (c) 2010 Kitware Inc.

  See COPYRIGHT.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file was originally developed by Jean-Christophe Fillion-Robin, Kitware Inc.
  and was partially funded by NIH grant 3P41RR013218-12S1

==============================================================================*/

// Qt includes
#include <QTimer>
#include <QWidget>

// SlicerQt includes
#include <qSlicerAbstractModuleRepresentation.h>
#include <qSlicerApplication.h>

// @MODULENAME@ includes
#include "qSlicer@MODULENAME@Module.h"

// MRML includes
#include <vtkMRMLScene.h>

// VTK includes
#include <vtkNew.h>

//-----------------------------------------------------------------------------
int qSlicer@MODULENAME@ModuleTest1( int argc, char * argv[] )
{
  qSlicerApplication app(argc, argv);

  QSettings * settings = app.settings();
  if(settings == 0)
    {
    std::cerr << "Line " << __LINE__ << " - Problem with settings()" << std::endl;
    return EXIT_FAILURE;
    }

  if (app.coreCommandOptions() == 0)
    {
    std::cerr << "Line " << __LINE__ << " - Problem with coreCommandOptions()" << std::endl;
    return EXIT_FAILURE;
    }

  bool exitWhenDone = false;
  app.parseArguments(exitWhenDone);
  if (exitWhenDone == true)
    {
    std::cerr << "Line " << __LINE__ 
              << " - Problem with the application::parseArguments function" << std::endl;
    return EXIT_FAILURE;
    }

  qSlicer@MODULENAME@Module * module = new qSlicer@MODULENAME@Module;

  //if (module->helpText().isEmpty())
  //  {
  //  std::cerr << "Line " << __LINE__
  //            << " - qSlicer@MODULENAME@Module::helpText() is empty." << std::endl;
  //  return EXIT_FAILURE;
  //  }

  if (module->acknowledgementText().isEmpty())
    {
    std::cerr << "Line " << __LINE__ 
              << " - qSlicer@MODULENAME@Module::acknowledgementText() is empty." << std::endl;
    return EXIT_FAILURE;
    }

  module->initialize(0);
  if (module->appLogic() != 0)
    {
    std::cerr << "Line " << __LINE__ 
              << " - qSlicer@MODULENAME@Module::initialize() failed." << std::endl;
    return EXIT_FAILURE;
    }

  if (module->logic() != module->logic())
    {
    std::cerr << "Line " << __LINE__ << " - The logic must remain the same." << std::endl;
    return EXIT_FAILURE;
    }

  vtkNew<vtkMRMLScene> scene;
  module->setMRMLScene(scene.GetPointer());
  if (module->mrmlScene() != scene.GetPointer())
    {
    std::cerr << "Line " << __LINE__ 
              << " - qSlicer@MODULENAME@Module::setMRMLScene() failed." << std::endl;
    return EXIT_FAILURE;
    }

  // Instantiate the logic if any
  module->logic();

  delete module;
  
  return EXIT_SUCCESS;
}
