#
# This file has been primarly designed for the purpose of Slicer extension development.
#
# It includes the required Slicer macros/functions and sets up compiler
# settings for a project to use Slicer.
#
# Note that the behavior of this file can customized up to some extent by
# defining variables like:
#
#   set(Slicer_SKIP_<DoSomething> TRUE)
#
# Such variable has to be set before:
#
#   include(${Slicer_USE_FILE})
#
# Note also that setting Slicer_DONT_USE_EXTENSION to TRUE allows to disable
# extension support.
#
# The variable allowing to customize the behavior are:
#
#  Slicer_SKIP_SlicerBlockSetCMakeOSXVariables
#  Slicer_SKIP_USE_FILE_INCLUDE_CHECK
#  Slicer_SKIP_EXTENSION_NAME_CHECK
#  Slicer_SKIP_PROJECT_COMMAND
#  Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE
#  Slicer_SKIP_EXTERNAL_DATA
#  Slicer_SKIP_SlicerBlockPlatformCheck
#  Slicer_SKIP_SET_CMAKE_C_CXX_FLAGS
#  Slicer_SKIP_ITKPlatformSpecificChecks
#  Slicer_SKIP_SlicerBlockCXXRequiredFlags
#  Slicer_SKIP_SlicerBlockAdditionalLauncherSettings
#  Slicer_SKIP_SlicerEnableExtensionTesting
#
# By default, if any 'Slicer_SKIP_<DoSomething>' variable is set to TRUE,
# a message will be displayed.
#
# For example:
#  set(Slicer_SKIP_SlicerBlockPlatformCheck TRUE)
#  include(${Slicer_USE_FILE})
#
# will output:
#  -- Skipping SlicerBlockPlatformCheck
#
# This is can avoided by setting the variable Slicer_VERBOSE_SKIP to TRUE
#

# --------------------------------------------------------------------------
# Helper function(s) and macro(s)
# --------------------------------------------------------------------------

include(UseSlicerMacros)

# If the variable Slicer_VERBOSE_SKIP is FALSE, this function will
# display the provided text prepended with "Skipping ".
function(_slicer_skip_message text)
  if(NOT Slicer_VERBOSE_SKIP)
    message(STATUS "Skipping ${text}")
  endif()
endfunction()

# --------------------------------------------------------------------------
if(NOT DEFINED Slicer_DONT_USE_EXTENSION)
  set(Slicer_DONT_USE_EXTENSION FALSE)
endif()

# --------------------------------------------------------------------------
if(NOT DEFINED Slicer_SKIP_SlicerBlockSetCMakeOSXVariables)
  set(Slicer_SKIP_SlicerBlockSetCMakeOSXVariables FALSE)
endif()
if(NOT Slicer_SKIP_SlicerBlockSetCMakeOSXVariables)
  # Note: By setting CMAKE_OSX_* variables before any enable_language() or project() calls,
  #       we ensure that the bitness will be properly detected.
  include(SlicerBlockSetCMakeOSXVariables)
else()
  _slicer_skip_message("SlicerBlockSetCMakeOSXVariables")
endif()

# --------------------------------------------------------------------------
# Setting and checking EXTENSION_NAME
# --------------------------------------------------------------------------
if(NOT Slicer_DONT_USE_EXTENSION)
  slicer_check_variable(EXTENSION_NAME _EXTENSION_NAME_SET)
  slicer_check_variable(MODULE_NAME _MODULE_NAME_SET)

  if(NOT ${_EXTENSION_NAME_SET} AND ${_MODULE_NAME_SET})
    set(EXTENSION_NAME ${MODULE_NAME})
    slicer_setting_variable_message("EXTENSION_NAME")
  endif()
  if(NOT Slicer_SKIP_EXTENSION_NAME_CHECK AND "${EXTENSION_NAME}" STREQUAL "")
    message(FATAL_ERROR "error: Make sure to set EXTENSION_NAME or MODULE_NAME prior to call 'include(\${Slicer_USE_FILE})' !")
  endif()
endif()

# --------------------------------------------------------------------------
# Setup project
# --------------------------------------------------------------------------

if(NOT Slicer_DONT_USE_EXTENSION)
  if(NOT DEFINED Slicer_SKIP_PROJECT_COMMAND)
    set(Slicer_SKIP_PROJECT_COMMAND FALSE)
  endif()
  if(NOT DEFINED Slicer_SKIP_USE_FILE_INCLUDE_CHECK)
    set(Slicer_SKIP_USE_FILE_INCLUDE_CHECK ${Slicer_SKIP_PROJECT_COMMAND})
  endif()
  if(NOT Slicer_SKIP_USE_FILE_INCLUDE_CHECK)
    if(DEFINED ${EXTENSION_NAME}_SOURCE_DIR AND NOT UseSlicer_INCLUDED_ONCE)
      message(FATAL_ERROR "Since calling 'include(\${Slicer_USE_FILE})' automatically calls 'project(${EXTENSION_NAME})'. "
                          "Make sure to remove any call to project(${EXTENSION_NAME}). "
                          "Before re-configuring, make sure to clean the build directory: ${CMAKE_CURRENT_BINARY_DIR}"
                          )
    endif()
    set(UseSlicer_INCLUDED_ONCE 1 CACHE INTERNAL "True if UseSlicer has already been included")
  else()
    _slicer_skip_message("Slicer_USE_FILE_INCLUDE_CHECK'")
  endif()

  if(Slicer_SKIP_EXTENSION_NAME_CHECK)
    set(Slicer_SKIP_PROJECT_COMMAND TRUE)
  endif()
  if(NOT Slicer_SKIP_PROJECT_COMMAND)
    project(${EXTENSION_NAME})
  else()
    _slicer_skip_message("'project(${EXTENSION_NAME})'")
  endif()
endif()

# --------------------------------------------------------------------------
# Prerequisites
# --------------------------------------------------------------------------

if(${ITK_VERSION_MAJOR} GREATER 3)
  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt
  list(APPEND ITK_LIBRARIES ITKFactoryRegistration)
endif()

# By default, the "<PROJECT>_USE_FILE" of each slicer external project will be included.
# This can be changed by setting the variable Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE to TRUE
if(NOT DEFINED Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE)
  set(Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE FALSE)
endif()
if(NOT ${Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE})
  foreach(proj ${Slicer_EXTERNAL_PROJECTS})
    set(proj_has_no_usefile -1)
    list(FIND Slicer_EXTERNAL_PROJECTS_NO_USEFILE ${proj} proj_has_no_usefile)
    #message("${proj} has_no_usefile: ${proj_has_no_usefile}")
    if(proj_has_no_usefile EQUAL -1)
      include(${${proj}_USE_FILE})
    endif()
  endforeach()
else()
  _slicer_skip_message("Slicer_SKIP_EXTERNAL_PROJECTS_USEFILE")
endif()

# Set '<PROJECTNAME>_DIR' variable(s) so that find_package(<PROJECTNAME>) works as expected.
set(PYTHONQT_INSTALL_DIR ${CTK_PYTHONQT_INSTALL_DIR})

# Find PythonQt package so that PYTHONQT_USE_RELEASE_PYTHON_FALLBACK is defined
# See https://github.com/commontk/PythonQt/issues/7
# and https://github.com/commontk/PythonQt/issues/8
if(Slicer_USE_PYTHONQT)
  find_package(PythonQt)
endif()

# --------------------------------------------------------------------------
# ExternalData
# --------------------------------------------------------------------------
if(NOT DEFINED Slicer_SKIP_EXTERNAL_DATA)
  set(Slicer_SKIP_EXTERNAL_DATA FALSE)
endif()
if(NOT ${Slicer_SKIP_EXTERNAL_DATA})
  set(ExternalData_OBJECT_STORES ${Slicer_ExternalData_OBJECT_STORES})
  set(ExternalData_URL_TEMPLATES ${Slicer_ExternalData_URL_TEMPLATES})
else()
  _slicer_skip_message("Slicer_ExternalData")
endif()

# --------------------------------------------------------------------------
# Platform check
# --------------------------------------------------------------------------
if(NOT DEFINED Slicer_SKIP_SlicerBlockPlatformCheck)
  set(Slicer_SKIP_SlicerBlockPlatformCheck FALSE)
endif()
if(NOT ${Slicer_SKIP_SlicerBlockPlatformCheck})
  include(SlicerBlockPlatformCheck)
else()
  _slicer_skip_message("SlicerBlockPlatformCheck")
endif()

#-----------------------------------------------------------------------------
# Set CMAKE_{C,CXX}_FLAGS variables
#-----------------------------------------------------------------------------
if(NOT DEFINED Slicer_SKIP_SET_CMAKE_C_CXX_FLAGS)
  set(Slicer_SKIP_SET_CMAKE_C_CXX_FLAGS FALSE)
endif()
if(NOT ${Slicer_SKIP_SET_CMAKE_C_CXX_FLAGS})
  #-----------------------------------------------------------------------------
  # Set ITK_REQUIRED_{C,CXX}_FLAGS variables
  #-----------------------------------------------------------------------------
  if(NOT DEFINED Slicer_SKIP_ITKPlatformSpecificChecks)
    set(Slicer_SKIP_ITKPlatformSpecificChecks FALSE)
  endif()
  if(NOT ${Slicer_SKIP_ITKPlatformSpecificChecks})
    include(ITKPlatformSpecificChecks)
  else()
    _slicer_skip_message("ITKPlatformSpecificChecks")
  endif()

  #-----------------------------------------------------------------------------
  # Set Slicer_{C,CXX}_REQUIRED_FLAGS variables
  #-----------------------------------------------------------------------------
  if(NOT DEFINED Slicer_SKIP_SlicerBlockCXXRequiredFlags)
    set(Slicer_SKIP_SlicerBlockCXXRequiredFlags FALSE)
  endif()
  if(NOT ${Slicer_SKIP_SlicerBlockCXXRequiredFlags})
    include(SlicerBlockCXXRequiredFlags)
  else()
    _slicer_skip_message("SlicerBlockCXXRequiredFlags")
  endif()

  #-----------------------------------------------------------------------------
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS_INIT} ${Slicer_REQUIRED_C_FLAGS} ${ITK_REQUIRED_C_FLAGS} ${ADDITIONAL_C_FLAGS}" CACHE STRING "CMake C Flags" FORCE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_INIT} ${Slicer_REQUIRED_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS} ${ADDITIONAL_CXX_FLAGS}" CACHE STRING "CMake CXX Flags" FORCE)
else()
  _slicer_skip_message("ITKPlatformSpecificChecks")
  _slicer_skip_message("SlicerBlockCXXRequiredFlags")
  _slicer_skip_message("SET_CMAKE_C_CXX_FLAGS")
endif()

#-----------------------------------------------------------------------------
# Static or Shared library
#------------------------------------------------------------------------------
if(NOT DEFINED BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS ${Slicer_BUILD_SHARED})
endif()

#-----------------------------------------------------------------------------
# Include directories - See SlicerMacroBuildQtModule
#------------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# CMake Function(s) and Macro(s)
#-----------------------------------------------------------------------------
include(CMakeParseArguments)
include(ctkMacroCompilePythonScript)
include(ctkMacroWrapPythonQt)
include(SlicerMacroParseArguments)
include(SlicerMacroCheckExternalProjectDependency)
include(SlicerMacroEmptyExternalProject)
if(Slicer_BUILD_CLI_SUPPORT)
  include(SlicerMacroBuildCLI)
endif()
include(SlicerMacroBuildModuleQtLibrary)
include(SlicerMacroBuildModuleVTKLibrary)
include(SlicerMacroPythonWrapModuleVTKLibrary)
include(SlicerMacroBuildModuleLogic)
include(SlicerMacroBuildModuleMRML)
include(SlicerMacroBuildModuleWidgets)
include(SlicerMacroBuildQtModule)
include(vtkMacroKitPythonWrap)

include(SlicerMacroSimpleTest)
include(SlicerMacroPythonTesting)
include(SlicerMacroConfigureGenericCxxModuleTests)
include(SlicerMacroConfigureGenericPythonModuleTests)

#-----------------------------------------------------------------------------
# Set a default build type if none was specified
#-----------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Debug' as none was specified.")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "MinSizeRel" "RelWithDebInfo")
endif()

if(NOT Slicer_DONT_USE_EXTENSION)
  #-----------------------------------------------------------------------------
  # Configure additional launcher settings
  #-----------------------------------------------------------------------------
  if(NOT DEFINED Slicer_SKIP_SlicerBlockAdditionalLauncherSettings)
    set(Slicer_SKIP_SlicerBlockAdditionalLauncherSettings FALSE)
  endif()
  if(NOT ${Slicer_SKIP_SlicerBlockAdditionalLauncherSettings})
    include(SlicerBlockAdditionalLauncherSettings)
  endif()

  #-----------------------------------------------------------------------------
  # Set Slicer_EXTENSION_CMAKE_GENERATOR and EXTENSION_{COMPILER, ARCHITECTURE, BITNESS, OPERATING_SYSTEM}
  #-----------------------------------------------------------------------------

  include(SlicerBlockUploadExtensionPrerequisites)
endif()

#-----------------------------------------------------------------------------
# Set Slicer_BUNDLE_EXTENSIONS_LOCATION variable
#-----------------------------------------------------------------------------
set(Slicer_BUNDLE_EXTENSIONS_LOCATION "")
if(APPLE)
  set(Slicer_BUNDLE_EXTENSIONS_LOCATION "${Slicer_EXTENSIONS_DIRNAME}/${EXTENSION_NAME}/")
  set(CMAKE_INSTALL_NAME_TOOL "" CACHE FILEPATH "" FORCE)
endif()

#-----------------------------------------------------------------------------
# Set Slicer_INSTALL_*MODULE_*_DIR variables
#-----------------------------------------------------------------------------
if(Slicer_BUILD_CLI_SUPPORT)
  set(Slicer_INSTALL_CLIMODULES_BIN_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_CLIMODULES_BIN_DIR}")
  if(APPLE)
    # For more detail, see 'Slicer/CMakeLists.txt' and search for 'Slicer_INSTALL_CLIMODULES_BIN_DIR'
    set(Slicer_INSTALL_CLIMODULES_BIN_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}/${Slicer_CLIMODULES_SUBDIR}")
  endif()
  set(Slicer_INSTALL_CLIMODULES_LIB_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_CLIMODULES_LIB_DIR}")
  set(Slicer_INSTALL_CLIMODULES_SHARE_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_CLIMODULES_SHARE_DIR}")
  if(APPLE)
    set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION "${Slicer_INSTALL_CLIMODULES_BIN_DIR}")
    set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION "${Slicer_INSTALL_CLIMODULES_LIB_DIR}")
    set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION "${Slicer_INSTALL_CLIMODULES_LIB_DIR}")
  endif()
endif()

set(Slicer_INSTALL_QTLOADABLEMODULES_BIN_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTLOADABLEMODULES_BIN_DIR}")
set(Slicer_INSTALL_QTLOADABLEMODULES_LIB_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTLOADABLEMODULES_LIB_DIR}")
set(Slicer_INSTALL_QTLOADABLEMODULES_PYTHON_LIB_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTLOADABLEMODULES_PYTHON_LIB_DIR}")
set(Slicer_INSTALL_QTLOADABLEMODULES_INCLUDE_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTLOADABLEMODULES_INCLUDE_DIR}")
set(Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTLOADABLEMODULES_SHARE_DIR}")

if(Slicer_USE_PYTHONQT)
  set(Slicer_INSTALL_QTSCRIPTEDMODULES_BIN_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTSCRIPTEDMODULES_BIN_DIR}")
  set(Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTSCRIPTEDMODULES_LIB_DIR}")
  set(Slicer_INSTALL_QTSCRIPTEDMODULES_INCLUDE_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTSCRIPTEDMODULES_INCLUDE_DIR}")
  set(Slicer_INSTALL_QTSCRIPTEDMODULES_SHARE_DIR "${Slicer_INSTALL_ROOT}${Slicer_BUNDLE_EXTENSIONS_LOCATION}${Slicer_QTSCRIPTEDMODULES_SHARE_DIR}")
endif()

#-----------------------------------------------------------------------------
# Set extension defaults if not already specified
#-----------------------------------------------------------------------------
if(NOT Slicer_DONT_USE_EXTENSION)
  if(NOT DEFINED EXTENSION_DEPENDS)
    set(EXTENSION_DEPENDS NA) # Specified as a space separated list or 'NA' if any
  endif()
  if(NOT DEFINED EXTENSION_LICENSE_FILE)
    set(EXTENSION_LICENSE_FILE ${Slicer_LICENSE_FILE})
  endif()
  if(NOT DEFINED EXTENSION_README_FILE)
    set(EXTENSION_README_FILE ${Slicer_README_FILE})
  endif()

  if(NOT DEFINED EXTENSION_SOURCE_DIR)
    set(EXTENSION_SOURCE_DIR ${CMAKE_SOURCE_DIR})
  endif()
  if(NOT DEFINED EXTENSION_SUPERBUILD_BINARY_DIR)
    set(EXTENSION_SUPERBUILD_BINARY_DIR ${CMAKE_BINARY_DIR})
  endif()
  if(NOT DEFINED EXTENSION_BUILD_SUBDIRECTORY)
    set(EXTENSION_BUILD_SUBDIRECTORY ".")
  endif()
  if(NOT DEFINED EXTENSION_ENABLED)
    set(EXTENSION_ENABLED 1)
  endif()

  slicer_setting_variable_message("EXTENSION_SOURCE_DIR" SKIP_TRUNCATE)
  slicer_setting_variable_message("EXTENSION_SUPERBUILD_BINARY_DIR" SKIP_TRUNCATE)
  slicer_setting_variable_message("EXTENSION_BUILD_SUBDIRECTORY" SKIP_TRUNCATE)

  #-----------------------------------------------------------------------------
  set(MIDAS_PACKAGE_URL "http://slicer.kitware.com/midas3" CACHE STRING "MIDAS URL where the extension should be uploaded.")
  set(MIDAS_PACKAGE_EMAIL "YOUR-MIDAS-LOGIN-NOTFOUND" CACHE STRING "Email allowing to authenticate to the MIDAS server.")
  set(MIDAS_PACKAGE_API_KEY "YOUR-MIDAS-APIKEY-NOTFOUND" CACHE STRING "Token allowing to authenticate to the MIDAS server.")

  slicer_setting_variable_message("MIDAS_PACKAGE_URL")
  slicer_setting_variable_message("MIDAS_PACKAGE_EMAIL")
  slicer_setting_variable_message("MIDAS_PACKAGE_API_KEY")

  set(optional_vars HOMEPAGE CATEGORY ICONURL CONTRIBUTORS DESCRIPTION
                    SCREENSHOTURLS DEPENDS LICENSE_FILE README_FILE
                    )
  foreach(var ${optional_vars})
    slicer_setting_variable_message(EXTENSION_${var})
  endforeach()

  #-----------------------------------------------------------------------------
  if(NOT DEFINED Slicer_SKIP_SlicerEnableExtensionTesting)
    set(Slicer_SKIP_SlicerEnableExtensionTesting FALSE)
  endif()
  if(NOT ${Slicer_SKIP_SlicerEnableExtensionTesting}
     AND NOT "${EXTENSION_NAME}" STREQUAL "")
    include(SlicerEnableExtensionTesting)
  endif()
endif()
