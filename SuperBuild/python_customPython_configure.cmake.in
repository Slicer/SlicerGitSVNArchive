set(ENV{CC} "@CMAKE_C_COMPILER@ @CMAKE_C_COMPILER_ARG1@")
set(ENV{CFLAGS} "@CMAKE_C_FLAGS@ @CMAKE_C_FLAGS_RELEASE@")
set(ENV{CXX} "@CMAKE_CXX_COMPILER@ @CMAKE_CXX_COMPILER_ARG1@")
set(ENV{CXXFLAGS} "@CMAKE_CXX_FLAGS@ @CMAKE_CXX_FLAGS_RELEASE@")
set(ENV{LDFLAGS} "@CMAKE_LINKER_FLAGS@ @CMAKE_LINKER_FLAGS_RELEASE@")

#
# This script configure a launcher named 'SlicerPython' that will invoke
# the real python executable ensuring that:
#  - appropriate python shared library are loaded
#  - appropriate OpenSSL libraries are loaded
#  - PYTHONPATH environment variable is set
#
# When executed, the launcher looks for a file named 'SlicerPythonLauncherSettings.ini',
# where it read the settings to initialize the environment with.
#

set(CMAKE_EXECUTABLE_SUFFIX "@CMAKE_EXECUTABLE_SUFFIX@")
set(PYTHON_EXECUTABLE "@PYTHON_EXECUTABLE@")
set(slicer_PYTHON_REAL_EXECUTABLE "@slicer_PYTHON_REAL_EXECUTABLE@")
set(slicer_PYTHON_SHARED_LIBRARY_DIR "@slicer_PYTHON_SHARED_LIBRARY_DIR@")
set(PYTHON_ENABLE_SSL @PYTHON_ENABLE_SSL@)
set(CTKAPPLAUNCHER_DIR "@CTKAPPLAUNCHER_DIR@")
set(python_DIR "@python_DIR@")
set(Slicer_BIN_DIR "@Slicer_BIN_DIR@")
set(Slicer_LIB_DIR "@Slicer_LIB_DIR@")
set(Slicer_SHARE_DIR "@Slicer_SHARE_DIR@")
set(Slicer_SOURCE_DIR "@Slicer_SOURCE_DIR@")
set(Slicer_BINARY_DIR "@Slicer_BINARY_DIR@")

#-----------------------------------------------------------------------------
# Copy and rename launcher
#-----------------------------------------------------------------------------

find_program(
  CTKAPPLAUNCHER_EXECUTABLE CTKAppLauncher
  PATHS ${CTKAPPLAUNCHER_DIR}/bin NO_DEFAULT_PATH
  )
if(NOT EXISTS ${CTKAPPLAUNCHER_EXECUTABLE})
  message(FATAL_ERROR "error: CTKAPPLAUNCHER_EXECUTABLE not found: ${CTKAPPLAUNCHER_EXECUTABLE}")
endif()

configure_file(
  ${CTKAPPLAUNCHER_EXECUTABLE}
  ${PYTHON_EXECUTABLE}
  COPYONLY
  )
if(NOT EXISTS ${PYTHON_EXECUTABLE})
  message(FATAL_ERROR "error: PYTHON_EXECUTABLE points to an inexistent file: ${PYTHON_EXECUTABLE}")
endif()


#-----------------------------------------------------------------------------
function(_listToQtSettingsArray ITEMS ITEMNAME OUTPUTVAR)
  set(idx 1)
  set(SETTINGS_ARRAY)
  list(LENGTH ITEMS item_count)
  foreach(item ${ITEMS})
    set(SETTINGS_ARRAY "${SETTINGS_ARRAY}${idx}\\${ITEMNAME}=${item}\n")
    math(EXPR idx "${idx} + 1")
  endforeach()
  set(SETTINGS_ARRAY "${SETTINGS_ARRAY}size=${item_count}")
  set(${OUTPUTVAR} ${SETTINGS_ARRAY} PARENT_SCOPE)
endfunction()

#-----------------------------------------------------------------------------
# Settings specific to the build tree.
#-----------------------------------------------------------------------------

set(PYTHONHOME "${python_DIR}")

set(_library_paths_build ${slicer_PYTHON_SHARED_LIBRARY_DIR})
if(PYTHON_ENABLE_SSL)
  list(APPEND _library_paths_build
    ${OPENSSL_EXPORT_LIBRARY_DIR})
endif()
_listToQtSettingsArray("${_library_paths_build}" "path" SETTINGS_PYTHONLAUNCHER_LIBRARY_PATHS)

set(_pythonpath_paths_build
  "${PYTHONHOME}/${PYTHON_STDLIB_SUBDIR}"
  "${PYTHONHOME}/${PYTHON_STDLIB_SUBDIR}/lib-dynload"
  "${PYTHONHOME}/${PYTHON_SITE_PACKAGES_SUBDIR}"
  )
_listToQtSettingsArray("${_pythonpath_paths_build}" "path" SETTINGS_PYTHONLAUNCHER_PYTHONPATH_PATHS)

set(PYTHON_EXE_SUFFIX_CONFIG "")

if(PYTHON_ENABLE_SSL)
  set(_src ${Slicer_SOURCE_DIR}/Base/QTCore/Resources/Certs/Slicer.crt)
  set(_dest ${Slicer_BINARY_DIR}/Slicer-build/${Slicer_SHARE_DIR}/Slicer.crt)
  configure_file(${_src} ${_dest} COPYONLY)
  message(STATUS "Copying '${_src}' to '${_dest}'")
endif()

set(SSL_CERT_FILE_CONFIG "")
if(PYTHON_ENABLE_SSL)
  set(SSL_CERT_FILE_CONFIG
    "SSL_CERT_FILE=<APPLAUNCHER_DIR>/../../Slicer-build/${Slicer_SHARE_DIR}/Slicer.crt")
endif()

# Configure SlicerPython launcher settings.
get_filename_component(python_bin_dir "${slicer_PYTHON_REAL_EXECUTABLE}" PATH)
configure_file(
  "@CMAKE_CURRENT_SOURCE_DIR@/SuperBuild/python_customPythonLauncherSettings.ini.in"
  ${python_bin_dir}/SlicerPythonLauncherSettings.ini
  @ONLY
  )

#-----------------------------------------------------------------------------
# Settings specific to the install tree.
#-----------------------------------------------------------------------------

set(PYTHONHOME "<APPLAUNCHER_DIR>/../lib/Python")

# Windows:
#   Python library    -> Slicer_BIN_DIR
#   OpenSSL libraries -> Slicer_BIN_DIR
# Unix:
#   Python library    -> lib/Python/lib
#   OpenSSL libraries -> Slicer_LIB_DIR

set(_library_paths_installed
  <APPLAUNCHER_DIR>/../${Slicer_BIN_DIR}
  <APPLAUNCHER_DIR>/../${Slicer_LIB_DIR}
  <APPLAUNCHER_DIR>/../lib/Python/lib
  )
_listToQtSettingsArray("${_library_paths_installed}" "path" SETTINGS_PYTHONLAUNCHER_LIBRARY_PATHS)

set(_pythonpath_paths_installed
  "${PYTHONHOME}/lib/Python/${PYTHON_STDLIB_SUBDIR}"
  "${PYTHONHOME}/lib/Python/${PYTHON_STDLIB_SUBDIR}/lib-dynload"
  "${PYTHONHOME}/lib/Python/${PYTHON_SITE_PACKAGES_SUBDIR}"
  "<APPLAUNCHER_DIR>/../${Slicer_BIN_DIR}/Python"
  )
_listToQtSettingsArray("${_pythonpath_paths_installed}" "path" SETTINGS_PYTHONLAUNCHER_PYTHONPATH_PATHS)

set(PYTHON_EXE_SUFFIX_CONFIG "-real")

set(SSL_CERT_FILE_CONFIG "")
if(PYTHON_ENABLE_SSL)
  set(SSL_CERT_FILE_CONFIG
    "SSL_CERT_FILE=<APPLAUNCHER_DIR>/../${Slicer_SHARE_DIR}/Slicer.crt")
endif()

# Configure SlicerPython launcher settings.
get_filename_component(python_bin_dir "${slicer_PYTHON_REAL_EXECUTABLE}" PATH)
configure_file(
  "@CMAKE_CURRENT_SOURCE_DIR@/SuperBuild/python_customPythonLauncherSettings.ini.in"
  ${python_bin_dir}/SlicerPythonLauncherSettingsToInstall.ini
  @ONLY
  )

# Note: Install rules for SlicerPythonLauncherSettingsToInstall.ini and SlicerPython executable
#       are specified in SlicerBlockInstallPython.cmake
