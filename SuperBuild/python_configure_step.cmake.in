set(ENV{CC} "@CMAKE_C_COMPILER@ @CMAKE_C_COMPILER_ARG1@")
set(ENV{CFLAGS} "@CMAKE_C_FLAGS@ @CMAKE_C_FLAGS_RELEASE@")
set(ENV{CXX} "@CMAKE_CXX_COMPILER@ @CMAKE_CXX_COMPILER_ARG1@")
set(ENV{CXXFLAGS} "@CMAKE_CXX_FLAGS@ @CMAKE_CXX_FLAGS_RELEASE@")
set(ENV{LDFLAGS} "@CMAKE_LINKER_FLAGS@ @CMAKE_LINKER_FLAGS_RELEASE@")

if(UNIX)
  set(LDFLAGS)
  set(CPPFLAGS)
  set(LD_LIBRARY_PATH "@CMAKE_CURRENT_BINARY_DIR@/python-build/lib")

  set(Slicer_USE_PYTHONQT_WITH_TCL "@Slicer_USE_PYTHONQT_WITH_TCL@")
  set(with_tcl_param)
  if(Slicer_USE_PYTHONQT_WITH_TCL)
    set(LD_LIBRARY_PATH "@CMAKE_CURRENT_BINARY_DIR@/tcl-build/lib:${LD_LIBRARY_PATH}")
    set(LDFLAGS "-L@CMAKE_CURRENT_BINARY_DIR@/tcl-build/lib")
    set(CPPFLAGS "-I@CMAKE_CURRENT_BINARY_DIR@/tcl-build/include")
    set(with_tcl_param "--with-tcl=@CMAKE_CURRENT_BINARY_DIR@/tcl-build")
  endif()

  set(extra_configure_flags)
  if(APPLE)
    set(CMAKE_OSX_ARCHITECTURES "@CMAKE_OSX_ARCHITECTURES@")
    if("${CMAKE_OSX_ARCHITECTURES}" STREQUAL "")
      message(FATAL_ERROR "error: CMAKE_OSX_ARCHITECTURES should be specified.")
    endif()
    list(LENGTH CMAKE_OSX_ARCHITECTURES arch_count)
    if(arch_count GREATER 1)
      message(FATAL_ERROR "error: Only one value should be associated with CMAKE_OSX_ARCHITECTURES.")
    endif()

    set(CMAKE_OSX_SYSROOT @CMAKE_OSX_SYSROOT@)
    if(NOT EXISTS "${CMAKE_OSX_SYSROOT}")
      message(FATAL_ERROR "error: CMAKE_OSX_SYSROOT should point to an existing directory.")
    endif()

    # See http://stackoverflow.com/questions/2111283/how-to-build-64-bit-python-on-os-x-10-6-only-64-bit-no-universal-nonsense
    #set(extra_configure_flags --with-universal-archs=32-bit)
    #if("${CMAKE_OSX_ARCHITECTURES}" STREQUAL "x86_64")
    #  set(extra_configure_flags --with-universal-archs=64-bit)
    #endif()
    #list(APPEND extra_configure_flags --enable-universalsdk=${CMAKE_OSX_SYSROOT})
    
    # Addendum: Using --with-universal-archs isn't the right approach since python build 
    #           system tries to build a universal binary using 'lipo' tool and fails.
    #           On the other hand, using an approach similar to one reported in [1], 
    #           where disable-framework option is provided and specifying arch, 
    #           sysroot and mmacosx-version-min reveals to be more successful.
    # 
    #           [1] http://webamused.wordpress.com/2011/01/31/building-64-bit-python-python-org-using-ucs-4-on-mac-os-x-10-6-6-snow-leopard/
    list(APPEND extra_configure_flags --disable-toolbox-glue --disable-framework)

    set(osx_arch_flags "-arch ${CMAKE_OSX_ARCHITECTURES}")
    set(osx_version_flag "-mmacosx-version-min=@CMAKE_OSX_DEPLOYMENT_TARGET@")
    set(osx_sysroot "-isysroot ${CMAKE_OSX_SYSROOT}")
    set(osx_flags "${osx_arch_flags} ${osx_version_flag} ${osx_sysroot}")

    set(CFLAGS "${CFLAGS} ${osx_flags}")
    set(CXXFLAGS "${CXXFLAGS} ${osx_flags}")
    set(CPPFLAGS "${CPPFLAGS} ${osx_flags}")
    set(LDFLAGS "${LDFLAGS} ${osx_flags}")
    set(LDFLAGS "${LDFLAGS} -undefined dynamic_lookup")
  endif(APPLE)

  foreach(v CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH)
    set(ENV{${v}} ${${v}})
  endforeach()

  #message(CXX:[$ENV{CXX}])
  #message(CFLAGS:[$ENV{CFLAGS}])
  #message(CXXFLAGS:[$ENV{CXXFLAGS}])
  #message(CPPFLAGS:[$ENV{CPPFLAGS}])
  #message(LDFLAGS:[$ENV{LDFLAGS}])
  #message(LD_LIBRARY_PATH:[$ENV{LD_LIBRARY_PATH}])

  execute_process(
    COMMAND sh configure ${extra_configure_flags} --prefix=@CMAKE_CURRENT_BINARY_DIR@/python-build ${with_tcl_param} --enable-unicode=ucs2 --enable-shared
    WORKING_DIRECTORY "@python_base@"
    #RESULT_VARIABLE rv
    )
endif()
